{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPnKq5WkFE/xSmKgr6okTWU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MECAI2022/product_classification_web/blob/main/pre_treatment_products.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FSBSt1m6jzRh"
      },
      "outputs": [],
      "source": [
        "import re\n",
        "import nltk\n",
        "import pandas as pd\n",
        "from unicodedata import normalize\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class pre_process_text:\n",
        "  \n",
        "    def __init__(self,flg_stemm=True, flg_lemm=False, stopwords_language=None):\n",
        "\n",
        "        '''\n",
        "        flg_stemm - choose to perform stemming pre treatment (True)\n",
        "        flg_lemm - choose to perform lemmatization pre treatment (True)\n",
        "        stopwords_language - select language to download stopwords (english,portuguese,german) if None dont perform selection\n",
        "        '''\n",
        "\n",
        "        #Get list of stopwords\n",
        "        if stopwords_language:\n",
        "\n",
        "            self.lst_stopwords = nltk.corpus.stopwords.words(stopwords_language) \n",
        "\n",
        "        else:\n",
        "\n",
        "            self.lst_stopwords = False\n",
        "\n",
        "        ## Stemming (remove -ing, -ly, ...)\n",
        "        if flg_stemm == True:\n",
        "            \n",
        "            self.treat = nltk.stem.porter.PorterStemmer().stem\n",
        "\n",
        "        else:\n",
        "\n",
        "            self.treat = False\n",
        "\n",
        "                    \n",
        "        ## Lemmatisation (convert the word into root word)\n",
        "        if flg_lemm == True:\n",
        "\n",
        "            self.treat = nltk.stem.wordnet.WordNetLemmatizer().lemmatize\n",
        "\n",
        "        else:\n",
        "\n",
        "            self.treat = False\n",
        "\n",
        "\n",
        "    @staticmethod\n",
        "    def extract_string(regex_str,word):\n",
        "\n",
        "\n",
        "        unit = re.findall(regex_str,word)\n",
        "                                                \n",
        "        if unit:\n",
        "\n",
        "            return unit[0]\n",
        "\n",
        "        else:\n",
        "\n",
        "            return np.nan\n",
        "\n",
        "    def transform(self,word):\n",
        "\n",
        "        #Lower case letters\n",
        "\n",
        "        word = word.lower()\n",
        "\n",
        "        #Remove special char\n",
        "\n",
        "        word = normalize('NFKD', word).encode('ASCII', 'ignore').decode('ASCII')\n",
        "\n",
        "        #Remove punctuation\n",
        "\n",
        "        word = re.sub(r'[^\\w\\s]', ' ',word)\n",
        "\n",
        "        #Remove multiple Spaces\n",
        "\n",
        "        word = re.sub(r'\\s+', ' ',word)\n",
        "\n",
        "        #Fix unit measures\n",
        "\n",
        " \n",
        "        unit = self.extract_string(r'(\\d+kg|\\d+mg|\\d+ml|\\d+km|\\d+cm|\\d+meia|\\d+w[\\s\\S]*?|\\d+v[\\s\\S]*?|\\d+g[\\s\\S]*?|\\d+k[\\s\\S]*?|\\d+l[\\s\\S]*?|\\d+\\s+g[\\s\\S]*?|\\d+\\s+k[\\s\\S]*?|\\d+\\s+kg|\\d+\\s+mg|\\d+\\s+ml|\\d+\\s+meia|\\d+\\s+km|\\d+\\s+cm|\\d+\\s+m[\\s\\S]*?|\\d+\\s+v[\\s\\S]*?|\\d+\\s+w[\\s\\S]*?)',word)\n",
        "\n",
        "        if unit != unit:\n",
        "\n",
        "            unit = self.extract_string(r'[\\s\\S]*?(\\bkg)',word)\n",
        "\n",
        "        if unit == unit:\n",
        "\n",
        "            valor = self.extract_string(r'(\\d+)',unit)\n",
        "            unit_dim = self.extract_string(r'(\\D+)',unit)\n",
        "\n",
        "            if valor == valor:\n",
        "\n",
        "                valor = re.sub(r'\\s+', '',valor)\n",
        "\n",
        "            else:\n",
        "\n",
        "                valor = ''\n",
        "\n",
        "            if unit_dim == unit_dim:\n",
        "\n",
        "                unit_dim = re.sub(r'\\s+', '',unit_dim)\n",
        "\n",
        "            else:\n",
        "\n",
        "                unit_dim = ''\n",
        "\n",
        "            if unit =='meia':\n",
        "\n",
        "                unit = self.extract_string(r'(\\d+kg|\\d+mg|\\d+ml|\\d+km|\\d+cm|\\d+w[\\s\\S]*?|\\d+v[\\s\\S]*?|\\d+g[\\s\\S]*?|\\d+k[\\s\\S]*?|\\d+l[\\s\\S]*?|\\d+\\s+g[\\s\\S]*?|\\d+\\s+k[\\s\\S]*?|\\d+\\s+kg|\\d+\\s+mg|\\d+\\s+ml|\\d+\\s+km|\\d+\\s+cm|\\d+\\s+v[\\s\\S]*?|\\d+\\s+w[\\s\\S]*?)',word)\n",
        "\n",
        "                if unit != unit:\n",
        "\n",
        "                    unit = 'meia'\n",
        "\n",
        "                \n",
        "                valor = self.extract_string(r'(\\d+)',unit)\n",
        "                unit_dim = self.extract_string(r'(\\D+)',unit)\n",
        "\n",
        "                if valor == valor:\n",
        "\n",
        "                    valor = re.sub(r'\\s+', '',valor)\n",
        "\n",
        "                else:\n",
        "\n",
        "                    valor = ''\n",
        "\n",
        "                if unit_dim == unit_dim:\n",
        "\n",
        "                    unit_dim = re.sub(r'\\s+', '',unit_dim)\n",
        "\n",
        "                else:\n",
        "\n",
        "                    unit_dim = ''\n",
        "            \n",
        "\n",
        "            if valor == '':\n",
        "\n",
        "                pass\n",
        "\n",
        "            elif float(valor)>10000:\n",
        "\n",
        "                valor = ''\n",
        "\n",
        "            elif float(valor)<2 and unit == 'k':\n",
        "\n",
        "                unit = 'kg'\n",
        "\n",
        "            if valor == '' and unit != 'meia':\n",
        "\n",
        "                unit_final = ' ' + '1' + unit_dim + ' '\n",
        "\n",
        "            else:\n",
        "\n",
        "                unit_final = ' ' + valor + unit_dim + ' '\n",
        "\n",
        "        else:\n",
        "\n",
        "            unit_final = None\n",
        "\n",
        "        if unit_final:\n",
        "\n",
        "            word = word.replace(unit,unit_final)\n",
        "\n",
        "        #Remove multiple Spaces\n",
        "\n",
        "        word = re.sub(r'\\s+', ' ',word)\n",
        "\n",
        "        #Remove single chars\n",
        "\n",
        "        word = re.sub(r'\\b\\D\\s\\b', '',word)\n",
        "\n",
        "        lst_text = word.split(' ')\n",
        "\n",
        "        ## remove Stopwords\n",
        "        if self.lst_stopwords:\n",
        "            lst_text = [text for text in lst_text if text not in \n",
        "                        self.lst_stopwords]\n",
        "                    \n",
        "        \n",
        "        if self.treat :\n",
        "\n",
        "            lst_text = [self.treat(text) for text in lst_text]\n",
        "                    \n",
        "        ## back to string from list\n",
        "        word = ' '.join(lst_text)\n",
        "\n",
        "        return word\n"
      ],
      "metadata": {
        "id": "twA7av3Gj4TF"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}